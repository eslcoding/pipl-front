{"version":3,"sources":["services/mondayService.js","cmps/AddColumn.js","cmps/ResetPrefix.js","pages/Home.js","pages/App.js","serviceWorker.js","index.js"],"names":["domain","require","prefix","targetCol","a","fetch","method","headers","body","JSON","stringify","res","json","data","query","console","log","boardId","prefixMap","prefixMapAll","updatePrefixMap","updatePrefixMapAll","getPrefixMapByBoardId","addColumnBack","authMonday","getPrefixMapAll","resetPrefix","AddColumn","columns","createColumn","useState","selectedOption","setSelectedOption","options","map","column","value","id","label","title","className","placeholder","onChange","kind","Button","kinds","PRIMARY","onClick","ev","preventDefault","style","width","size","sizes","MEDIUM","ResetPrefix","prefixKeys","color","colors","NEGATIVE","monday","mondaySdk","Home","state","settings","background","attentionBoxTitle","attentionBoxType","name","nextNum","selectedColumn","isFirst","getItemsIds","api","items","boards","item","srcColId","Swal","showLoading","mondayService","fire","text","icon","confirmButtonText","showDenyButton","denyButtonText","isConfirmed","targetColId","create_column","getColPrefixs","colPrefixs","itemsIds","forEach","itemId","idx","currPrefix","getPrefixCount","count","savePrefixMap","close","itemColVals","column_values","find","col","setSelectedColumn","setState","setPrefixKeys","prefixeMapArr","Object","keys","filter","key","this","listen","boardIds","type","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b48b8b9a.chunk.js","sourcesContent":["\n\nconst BASE_URL = '/api/test'\nconst axios = require('axios')\n/*PROD*/\n// const domain = 'https://test102-monday-pipl.herokuapp.com'\n\n/*DEV*/\n// const domain = 'https://a265d9d4c69a.ngrok.io'\nconst domain = 'http://localhost:3030'\n\n\n// const domain = 'https://test-monday-pipl.herokuapp.com'\n\n// saveToStorage(PREFIX_KEY, {})\n// function creatPrefixMap() {\n//     var prefixMap \n\n// }\n\nasync function query(prefix, targetCol) {\n    // try {\n    //     axios.post('', ())\n    // }\n\n    let res = await fetch(domain + '/api/monday/test', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            'colData': { prefix, targetCol }\n        })\n    });\n    res = await res.json();\n\n    return res.data;\n\n\n}\n\n\n\n\n\n\nasync function addColumnBack(query) {\n\n    let res = await fetch(domain + '/api/monday/addColumn', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            'query': query\n        })\n\n    });\n    console.log('res: ', res);\n\n    res = await res.json();\n\n    return res;\n\n}\nasync function authMonday() {\n\n    let res = await fetch(domain + '/api/monday/auth', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n\n\n    });\n    console.log('res: ', res);\n\n    res = await res.json();\n\n    return res;\n\n}\n\n\nasync function getPrefixMapByBoardId(boardId) {\n\n    // try {\n    //     axios.post('http://localhost:8302', ())\n    // }\n\n    // let res = await fetch(domain+'/api/monday/getPrefixMap/'+boardId, {\n    console.log('domain: ', domain);\n\n    let res = await fetch(domain + '/api/monday/getPrefixMap', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            'boardId': boardId\n        })\n\n    });\n    res = await res.json();\n\n    return res;\n\n}\n\n\nasync function getPrefixMapAll(boardId) {\n\n    // try {\n    //     axios.post('http://localhost:8302', ())\n    // }\n\n    // let res = await fetch(domain+'/api/monday/getPrefixMap/'+boardId, {\n    console.log('domain: ', domain);\n\n    let res = await fetch(domain + '/api/monday/getPrefixMapAll', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            'boardId': boardId\n        })\n\n    });\n    res = await res.json();\n\n    return res;\n\n}\n\nasync function updatePrefixMap(prefixMap) {\n\n    // try {\n    //     axios.post('http://localhost:8302', ())\n    // }\n\n    let res = await fetch(domain + '/api/monday/updatePrefixMap', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            'prefixMap': prefixMap\n        })\n\n    });\n    res = await res.json();\n\n    return res;\n\n}\nasync function updatePrefixMapAll(prefixMapAll) {\n\n    // try {\n    //     axios.post('http://localhost:8302', ())\n    // }\n\n    let res = await fetch(domain + '/api/monday/updatePrefixMapAll', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            'prefixMapAll': prefixMapAll\n        })\n\n    });\n    res = await res.json();\n\n    return res;\n\n}\n\nasync function resetPrefix(prefix) {\n    console.log('prefix: ', prefix);\n\n\n    //     axios.post('http://localhost:8302', ())\n    // }\n    try {\n\n        let res = await fetch(domain + '/api/monday/resetPrefix', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                'prefix': prefix\n            })\n\n        });\n        res = await res.json();\n\n        return res;\n    } catch (err) {\n\n    }\n\n}\n\n\n\n\n\n\n\n\nexport default {\n    query,\n    // getPrefixMap,\n    updatePrefixMap,\n    updatePrefixMapAll,\n    getPrefixMapByBoardId,\n    addColumnBack,\n    authMonday,\n    getPrefixMapAll,\n    resetPrefix\n}","import React, { useState } from 'react'\nimport Select from 'react-select';\nimport Button from \"monday-ui-react-core/dist/Button.js\"\n\n// import { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\n\nfunction AddColumn({columns, createColumn }) {\n    const [preFix, setPreFix] = useState('')\n    const [selectedOption, setSelectedOption] = useState(null)\n\n    const handleInput = ({ target: { value } }) => {\n        if (!value) return\n        setPreFix(value)\n    }\n\n    const handleSelect = (selectedOption) => {\n        setSelectedOption(selectedOption)\n        // setSelectedColumn(selectedOption)\n    }\n\n    const onCreateColumn = (ev) => {\n        ev.preventDefault()\n        if (!selectedOption?.value) return\n        createColumn(selectedOption.value)\n    }\n\n    const options = columns.map(column => { return { value: column.id, label: column.title } })\n    return (\n        \n        <form className=\"add-column\">\n            <Select\n                placeholder=\"Choose a Status column as an ID prefix\"\n                value={selectedOption}\n                options={options}\n                onChange={handleSelect}\n                className='check'\n            />\n\n            {/* <input placeholder=\"Choose target column prefix\" onInput={handleInput} name=\"prefix\" value={preFix} /> */}\n            {/* <button onClick={onCreateColumn}>Add Column</button> */}\n            <Button  kind={Button.kinds.PRIMARY} onClick={onCreateColumn} style={{ width: '150px'}} size={Button.sizes.MEDIUM}>Add Column</Button>\n\n        </form>\n    )\n}\n\nexport default AddColumn\n","import React, { useState } from 'react'\nimport Select from 'react-select';\nimport Button from \"monday-ui-react-core/dist/Button.js\"\n\nexport default function ResetPrefix({ prefixKeys, resetPrefix }) {\n\n  const [selectedOption, setSelectedOption] = useState(null)\n\n\n\n  const handleSelect = (selectedOption) => {\n    console.log('handleSelect -> selectedOption', selectedOption)\n    setSelectedOption(selectedOption)\n  }\n\n  const onResetPrefix = () => {\n    if (!selectedOption.value) return\n    resetPrefix(selectedOption.value)\n\n  }\n\n  return (\n    <form className=\"reset-prefix\">\n      <Select\n        placeholder=\"Choose prefix to reset\"\n        value={selectedOption}\n        options={prefixKeys}\n        onChange={handleSelect}\n      className='check'\n      />\n      <Button onClick={onResetPrefix} color={Button.colors.NEGATIVE} kind={Button.kinds.PRIMARY} style={{ width: '150px' }} size={Button.sizes.MEDIUM}>Reset Prefix</Button>\n\n    </form>\n\n  )\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport Swal from 'sweetalert2';\n\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\"\n//Explore more Monday React Components here: https://style.monday.com/\nimport AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\"\nimport mondayService from \"../services/mondayService\";\nimport AddColumn from \"../cmps/AddColumn\";\nimport ResetPrefix from \"../cmps/ResetPrefix\";\nconst monday = mondaySdk();\nconst KEY = 'BOARD_KEY'\nclass Home extends React.Component {\n\n  // Default state\n  state = {\n    settings: {\n      background: \"#e2445c\",\n      attentionBoxTitle: \"Hey\",\n      attentionBoxType: \"danger\"\n    },\n    name: \"\",\n    nextNum: null,\n    columns: null,\n    selectedColumn: null,\n    prefixMap: null,\n    isFirst: true,\n    prefixKeys: null\n  };\n\n\n  async componentDidMount() {\n    // mondayService.authorization()\n    var query;\n    this.setPrefixKeys()\n    await monday.listen(\"context\", async (res) => {\n\n      const boardId = res.data.boardIds[0]\n      // let prefixMap = await mondayService.getPrefixMapByBoardId(boardId)\n      // const isFirst = !!prefixMap\n\n\n      // const { id: boardId } = res.data.boards[0]\n      this.setState({ ...this.state, boardId })\n\n\n      query = `query {boards (ids:${this.state.boardId}){\n        columns {\n          id\n          title\n          type\n        }\n      }}`\n      res = await monday.api(query)\n      let { columns } = res.data.boards[0]\n      columns = columns.filter(col => col.type === 'color')\n      this.setState({ columns })\n    })\n\n  }\n\n  getItemsIds = async (boardId) => {\n    const query = `\n    query \n      { boards (ids:${boardId}) \n        { items {\n           id\n      \n          }\n        }\n      }`\n    const { data } = await monday.api(query)\n    const { items } = data.boards[0]\n    return items.map(item => item.id)\n\n  }\n\n  createColumn = async (srcColId) => {\n\n\n    try {\n      Swal.showLoading();\n\n      const { boardId } = this.state\n      let prefixMap = await mondayService.getPrefixMapByBoardId(boardId)\n      let prefixMapAll = await mondayService.getPrefixMapAll(boardId)\n      /* reconstract prefixmap to match what we did before */\n      prefixMapAll = { map: prefixMapAll[0] }\n      if (prefixMap) {\n\n        const { isConfirmed } = await Swal.fire({\n          title: 'You Already have an ID Column',\n          text: 'Are you sure you want to create another one?',\n          icon: 'warning',\n          confirmButtonText: 'yes',\n          showDenyButton: 'true',\n          denyButtonText: 'no'\n        });\n        if (!isConfirmed) return\n      }\n\n\n      var query = `mutation {\n        create_column(board_id: ${boardId}, title: \"PERSISTENT ID\", column_type: text) {\n          id\n        }\n      }`\n      let res = await monday.api(query)\n      // let res = await mondayService.addColumnBack(query)\n\n      const { create_column: { id: targetColId } } = res.data\n      const colPrefixs = await this.getColPrefixs(srcColId, boardId)\n      const itemsIds = await this.getItemsIds(boardId)\n\n\n\n      prefixMap = prefixMap || { map: {}, boardId }\n      itemsIds.forEach(async (itemId, idx) => {\n        const currPrefix = colPrefixs[idx]\n        let text = '';\n        if (currPrefix) {\n          const count = await this.getPrefixCount(currPrefix, prefixMapAll)\n          text = currPrefix + '-' + count\n        }\n        text = JSON.stringify(text)\n        query = ` mutation {\n          change_simple_column_value (board_id: ${boardId}, item_id: ${itemId}, column_id: \"${targetColId}\", value: ${text}) {\n            id\n          }\n        }`\n        await monday.api(query)\n\n      });\n\n      await this.savePrefixMap(prefixMap, prefixMapAll, srcColId, targetColId)\n      Swal.close();\n\n      Swal.fire({\n        icon: 'success',\n        title: 'Column Added Successfully',\n        text: 'Please refresh to continue',\n      });\n    } catch (error) {\n      console.log('error: ', error);\n\n    } finally {\n\n    }\n    // window.parent.location.reload();\n\n\n  }\n\n\n\n  getColPrefixs = async (srcColId, boardId) => {\n    const query = `query\n                     {  boards (ids:${boardId}) \n                         { items {\n                           column_values {\n                             id\n                             text\n                            }\n                         }\n                       }\n                     }`\n\n    let res = await monday.api(query)\n    const { data: { boards } } = res\n    const { items } = boards[0]\n    return items.map(itemColVals => {\n      const { column_values: colVals } = itemColVals\n      const srcColVal = colVals.find(col => col.id === srcColId)\n      return srcColVal.text\n    })\n\n\n  }\n\n  getPrefixCount = async (prefix, prefixMap) => {\n    if (prefix === 'null') return ''\n    prefixMap.map[prefix] = (prefixMap.map[prefix]) ? prefixMap.map[prefix] + 1 : 1\n    return prefixMap.map[prefix]\n  }\n\n  savePrefixMap = async (prefixMap, prefixMapAll, srcColId, targetColId) => {\n\n    prefixMap.targetColId = targetColId\n    prefixMap.srcColId = srcColId\n    const newPrefixMap = await mondayService.updatePrefixMap(prefixMap)\n    await mondayService.updatePrefixMapAll(prefixMapAll)\n\n\n  }\n\n\n\n\n  // apiCallTest = () => {\n  //   const query = ``\n  // }\n\n  setSelectedColumn = (selectedColumn) => {\n    this.setState({ selectedColumn })\n  }\n\n  authMonday = () => {\n    mondayService.authMonday()\n  }\n\n  setPrefixKeys = async () => {\n    const prefixeMapArr = await mondayService.getPrefixMapAll()\n    let prefixKeys = Object.keys(prefixeMapArr[0]).filter(key => key !== '_id').map(key => ({ value: key, label: key }))\n    this.setState({ prefixKeys })\n    console.log('setPrefixKeys= -> prefixKeys', prefixKeys)\n  }\n\n  resetPrefix = async (prefix) => {\n    const { isConfirmed } = await Swal.fire({\n      title: '',\n      text: `Are you sure you want to reset \"${prefix}\"?`,\n      icon: 'warning',\n      confirmButtonText: 'yes',\n      showDenyButton: 'true',\n      denyButtonText: 'no'\n    });\n    if (!isConfirmed) return\n\n    try {\n      await mondayService.resetPrefix(prefix)\n      Swal.fire({\n        icon: 'success',\n        title: `The prefix \"${prefix}\" is now reset`,\n        // text: 'Please refresh to continue',\n      });\n\n    } catch (err) {\n\n    }\n  }\n\n\n\n  render() {\n    const { columns, prefixKeys } = this.state\n    if (!columns) return <div>Loading..</div>\n    return (\n      <div className=\"container\">\n        <AddColumn setSelectedColumn={this.setSelectedColumn} columns={columns} createColumn={this.createColumn} />\n        {prefixKeys && <ResetPrefix resetPrefix={this.resetPrefix} prefixKeys={prefixKeys} />}\n        {/* <button onClick={this.authMonday}></button> */}\n\n      </div>\n    )\n  }\n}\nconst style = {\n  backgroundColor: \"\"\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"../App.css\";\nimport \"monday-ui-react-core/dist/main.css\"\nimport Home from \"./Home\";\n//Explore more Monday React Components here: https://style.monday.com/\n\nclass App extends React.Component {\n\n  // Default state\n  state = {\n\n  };\n\n\n  async componentDidMount() {\n\n  }\n\n\n\n  render() {\n    return (\n\n        <div className=\"main-container\">\n          {/* <header className=\"main-header\">Hello!</header> */}\n          <Home/>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["services/mondayService.js","cmps/AddColumn.js","cmps/ResetPrefix.js","pages/Home.js","pages/App.js","serviceWorker.js","index.js"],"names":["domain","require","prefix","targetCol","a","fetch","method","headers","body","JSON","stringify","colData","res","json","data","query","console","log","boardId","prefixMap","prefixMapAll","updatePrefixMap","updatePrefixMapAll","getPrefixMapByBoardId","addColumnBack","authMonday","getPrefixMapAll","resetPrefix","AddColumn","columns","createColumn","useState","selectedOption","setSelectedOption","options","map","column","value","id","label","title","className","placeholder","onChange","kind","Button","kinds","PRIMARY","onClick","ev","preventDefault","style","width","size","sizes","MEDIUM","ResetPrefix","prefixKeys","color","colors","NEGATIVE","monday","mondaySdk","Home","state","settings","background","attentionBoxTitle","attentionBoxType","name","nextNum","selectedColumn","isFirst","getItemsIds","api","items","boards","item","srcColId","Swal","showLoading","mondayService","fire","text","icon","confirmButtonText","showDenyButton","denyButtonText","isConfirmed","targetColId","create_column","getColPrefixs","colPrefixs","itemsIds","forEach","itemId","idx","currPrefix","getPrefixCount","count","savePrefixMap","close","itemColVals","column_values","find","col","setSelectedColumn","setState","setPrefixKeys","prefixeMapArr","Object","keys","filter","key","this","listen","boardIds","type","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TAGMA,G,MAFQC,EAAQ,IAEP,6C,4CAWf,WAAqBC,EAAQC,GAA7B,eAAAC,EAAA,sEAKkBC,MAAML,EAAS,mBAAoB,CACjDM,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,QAAS,CAAET,SAAQC,iBAXzB,cAKMS,EALN,gBAccA,EAAIC,OAdlB,cAcED,EAdF,yBAgBSA,EAAIE,MAhBb,4C,kEAmBA,WAA6BC,GAA7B,eAAAX,EAAA,sEACkBC,MAAML,EAAS,wBAAyB,CACtDM,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBK,MAAOA,MAPb,cACMH,EADN,OAUEI,QAAQC,IAAI,QAASL,GAVvB,SAYcA,EAAIC,OAZlB,cAYED,EAZF,yBAcSA,GAdT,4C,kEAgBA,4BAAAR,EAAA,sEACkBC,MAAML,EAAS,mBAAoB,CACjDM,OAAQ,OACRC,QAAS,CACP,eAAgB,sBAJtB,cACMK,EADN,OAOEI,QAAQC,IAAI,QAASL,GAPvB,SAScA,EAAIC,OATlB,cASED,EATF,yBAWSA,GAXT,4C,kEAcA,WAAqCM,GAArC,eAAAd,EAAA,6DAMEY,QAAQC,IAAI,WAAYjB,GAN1B,SAQkBK,MAAML,EAAS,2BAA4B,CACzDM,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBQ,QAASA,MAdf,cAQMN,EARN,gBAiBcA,EAAIC,OAjBlB,cAiBED,EAjBF,yBAmBSA,GAnBT,4C,kEAsBA,WAA+BM,GAA/B,eAAAd,EAAA,6DAMEY,QAAQC,IAAI,WAAYjB,GAN1B,SAQkBK,MAAML,EAAS,8BAA+B,CAC5DM,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBQ,QAASA,MAdf,cAQMN,EARN,gBAiBcA,EAAIC,OAjBlB,cAiBED,EAjBF,yBAmBSA,GAnBT,4C,kEAsBA,WAA+BO,GAA/B,eAAAf,EAAA,sEAKkBC,MAAML,EAAS,8BAA+B,CAC5DM,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBS,UAAWA,MAXjB,cAKMP,EALN,gBAccA,EAAIC,OAdlB,cAcED,EAdF,yBAgBSA,GAhBT,4C,kEAkBA,WAAkCQ,GAAlC,eAAAhB,EAAA,sEAKkBC,MAAML,EAAS,iCAAkC,CAC/DM,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBU,aAAcA,MAXpB,cAKMR,EALN,gBAccA,EAAIC,OAdlB,cAcED,EAdF,yBAgBSA,GAhBT,4C,kEAmBA,WAA2BV,GAA3B,eAAAE,EAAA,6DACEY,QAAQC,IAAI,WAAYf,GAD1B,kBAMoBG,MAAML,EAAS,0BAA2B,CACxDM,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBR,OAAQA,MAZhB,cAMQU,EANR,gBAegBA,EAAIC,OAfpB,cAeID,EAfJ,yBAiBWA,GAjBX,6F,sBAqBe,OACbG,M,8CAEAM,gB,4CACAC,mB,4CACAC,sB,4CACAC,c,4CACAC,W,2CACAC,gB,4CACAC,Y,4EChIaC,MAxCf,YAA8C,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,aAAgB,EACbC,mBAAS,IADI,gCAEGA,mBAAS,OAFZ,mBAElCC,EAFkC,KAElBC,EAFkB,KAoBnCC,EAAUL,EAAQM,KAAI,SAAAC,GAAY,MAAO,CAAEC,MAAOD,EAAOE,GAAIC,MAAOH,EAAOI,UACjF,OAEI,0BAAMC,UAAU,cACZ,kBAAC,IAAD,CACIC,YAAY,yCACZL,MAAOL,EACPE,QAASA,EACTS,SAnBS,SAACX,GAClBC,EAAkBD,IAmBVS,UAAU,UAKd,kBAAC,IAAD,CAASG,KAAMC,IAAOC,MAAMC,QAASC,QApBtB,SAACC,GACpBA,EAAGC,kBACC,OAAClB,QAAD,IAACA,OAAD,EAACA,EAAgBK,QACrBP,EAAaE,EAAeK,QAiBsCc,MAAO,CAAEC,MAAO,SAAUC,KAAMR,IAAOS,MAAMC,QAA3G,gBCpCG,SAASC,EAAT,GAAmD,IAA5BC,EAA2B,EAA3BA,WAAY9B,EAAe,EAAfA,YAAe,EAEnBI,mBAAS,MAFU,mBAExDC,EAFwD,KAExCC,EAFwC,KAiB/D,OACE,0BAAMQ,UAAU,gBACd,kBAAC,IAAD,CACEC,YAAY,yBACZL,MAAOL,EACPE,QAASuB,EACTd,SAjBe,SAACX,GACpBhB,QAAQC,IAAI,iCAAkCe,GAC9CC,EAAkBD,IAgBhBS,UAAU,UAEV,kBAAC,IAAD,CAAQO,QAfU,WACfhB,EAAeK,OACpBV,EAAYK,EAAeK,QAaOqB,MAAOb,IAAOc,OAAOC,SAAUhB,KAAMC,IAAOC,MAAMC,QAASI,MAAO,CAAEC,MAAO,SAAWC,KAAMR,IAAOS,MAAMC,QAAzI,iBCnBN,IAAMM,EAASC,MAsOAC,E,4MAlObC,MAAQ,CACNC,SAAU,CACRC,WAAY,UACZC,kBAAmB,MACnBC,iBAAkB,UAEpBC,KAAM,GACNC,QAAS,KACTzC,QAAS,KACT0C,eAAgB,KAChBpD,UAAW,KACXqD,SAAS,EACTf,WAAY,M,EAgCdgB,Y,uCAAc,WAAOvD,GAAP,qBAAAd,EAAA,6DACNW,EADM,4CAGMG,EAHN,0FAUW2C,EAAOa,IAAI3D,GAVtB,uBAUJD,EAVI,EAUJA,KACA6D,EAAU7D,EAAK8D,OAAO,GAAtBD,MAXI,kBAYLA,EAAMxC,KAAI,SAAC0C,GAAD,OAAUA,EAAKvC,OAZpB,2C,wDAedR,a,uCAAe,WAAOgD,GAAP,+BAAA1E,EAAA,sEAEX2E,IAAKC,cAEG9D,EAAY,EAAK8C,MAAjB9C,QAJG,SAKW+D,EAAc1D,sBAAsBL,GAL/C,cAKPC,EALO,gBAMc8D,EAAcvD,gBAAgBR,GAN5C,UAQXE,EAAe,CAAEe,KAFbf,EANO,QAQwB,KAC/BD,EATO,kCAUqB4D,IAAKG,KAAK,CACtC1C,MAAO,gCACP2C,KAAM,+CACNC,KAAM,UACNC,kBAAmB,MACnBC,eAAgB,OAChBC,eAAgB,OAhBT,sBAUDC,YAVC,0DAqBPzE,EArBO,sDAsBiBG,EAtBjB,8FA0BK2C,EAAOa,IAAI3D,GA1BhB,eA0BPH,EA1BO,OA8BY6E,EACnB7E,EAAIE,KADN4E,cAAiBpD,GA9BR,UAgCc,EAAKqD,cAAcb,EAAU5D,GAhC3C,eAgCL0E,EAhCK,iBAiCY,EAAKnB,YAAYvD,GAjC7B,eAiCL2E,EAjCK,OAmCX1E,EAAYA,GAAa,CAAEgB,IAAK,GAAIjB,WACpC2E,EAASC,QAAT,uCAAiB,WAAOC,EAAQC,GAAf,mBAAA5F,EAAA,yDACT6F,EAAaL,EAAWI,GAC1Bb,EAAO,IACPc,EAHW,gCAIO,EAAKC,eAAeD,EAAY7E,GAJvC,OAIP+E,EAJO,OAKbhB,EAAOc,EAAa,IAAME,EALb,cAOfhB,EAAO1E,KAAKC,UAAUyE,GACtBpE,EAAK,uEACqCG,EADrC,sBAC0D6E,EAD1D,yBACiFN,EADjF,qBACyGN,EADzG,+CARU,UAaTtB,EAAOa,IAAI3D,GAbF,4CAAjB,yDApCW,UAoDL,EAAKqF,cAAcjF,EAAWC,EAAc0D,EAAUW,GApDjD,QAqDXV,IAAKsB,QAELtB,IAAKG,KAAK,CACRE,KAAM,UACN5C,MAAO,4BACP2C,KAAM,+BA1DG,kDA6DXnE,QAAQC,IAAI,UAAZ,MA7DW,sG,wDAmEf0E,c,uCAAgB,WAAOb,EAAU5D,GAAjB,qBAAAd,EAAA,6DACRW,EADQ,qDAEoBG,EAFpB,gRAYE2C,EAAOa,IAAI3D,GAZb,cAYVH,EAZU,OAcJgE,EACNhE,EADFE,KAAQ8D,OAEFD,EAAUC,EAAO,GAAjBD,MAhBM,kBAiBPA,EAAMxC,KAAI,SAACmE,GAGhB,OAFmCA,EAA3BC,cACkBC,MAAK,SAACC,GAAD,OAASA,EAAInE,KAAOwC,KAClCK,SApBL,2C,0DAwBhBe,e,uCAAiB,WAAOhG,EAAQiB,GAAf,SAAAf,EAAA,yDACA,SAAXF,EADW,yCACe,IADf,cAEfiB,EAAUgB,IAAIjC,GAAUiB,EAAUgB,IAAIjC,GAClCiB,EAAUgB,IAAIjC,GAAU,EACxB,EAJW,kBAKRiB,EAAUgB,IAAIjC,IALN,2C,0DAQjBkG,c,uCAAgB,WAAOjF,EAAWC,EAAc0D,EAAUW,GAA1C,SAAArF,EAAA,6DACde,EAAUsE,YAAcA,EACxBtE,EAAU2D,SAAWA,EAFP,SAGaG,EAAc5D,gBAAgBF,GAH3C,8BAIR8D,EAAc3D,mBAAmBF,GAJzB,2C,8DAWhBsF,kBAAoB,SAACnC,GACnB,EAAKoC,SAAS,CAAEpC,oB,EAGlB9C,WAAa,WACXwD,EAAcxD,c,EAGhBmF,c,sBAAgB,8BAAAxG,EAAA,sEACc6E,EAAcvD,kBAD5B,OACRmF,EADQ,OAEVpD,EAAaqD,OAAOC,KAAKF,EAAc,IACxCG,QAAO,SAACC,GAAD,MAAiB,QAARA,KAChB9E,KAAI,SAAC8E,GAAD,MAAU,CAAE5E,MAAO4E,EAAK1E,MAAO0E,MACtC,EAAKN,SAAS,CAAElD,eAChBzC,QAAQC,IAAI,+BAAgCwC,GAN9B,2C,EAShB9B,Y,uCAAc,WAAOzB,GAAP,eAAAE,EAAA,sEACkB2E,IAAKG,KAAK,CACtC1C,MAAO,GACP2C,KAAK,mCAAD,OAAqCjF,EAArC,MACJkF,KAAM,UACNC,kBAAmB,MACnBC,eAAgB,OAChBC,eAAgB,OAPN,qBACJC,YADI,0EAYJP,EAActD,YAAYzB,GAZtB,OAaV6E,IAAKG,KAAK,CACRE,KAAM,UACN5C,MAAM,eAAD,OAAiBtC,EAAjB,oBAfG,4G,sPAxKZgH,KAAKN,gB,SACC/C,EAAOsD,OAAO,UAAd,uCAAyB,WAAOvG,GAAP,iBAAAR,EAAA,6DACvBc,EAAUN,EAAIE,KAAKsG,SAAS,GAKlC,EAAKT,SAAL,2BAAmB,EAAK3C,OAAxB,IAA+B9C,aAE/BH,EAAK,6BAAyB,EAAKiD,MAAM9C,QAApC,6FARwB,SAejB2C,EAAOa,IAAI3D,GAfM,OAe7BH,EAf6B,OAiB7BiB,GADMA,EAAYjB,EAAIE,KAAK8D,OAAO,GAA5B/C,SACYmF,QAChB,SAACP,GAAD,MAAsB,UAAbA,EAAIY,MAAiC,SAAbZ,EAAIY,QAGvC,EAAKV,SAAS,CAAE9E,YArBa,2CAAzB,uD,qIA4LE,IAAD,EACyBqF,KAAKlD,MAA7BnC,EADD,EACCA,QAAS4B,EADV,EACUA,WACjB,OAAK5B,EAEH,yBAAKY,UAAU,aACb,kBAAC,EAAD,CACEiE,kBAAmBQ,KAAKR,kBACxB7E,QAASA,EACTC,aAAcoF,KAAKpF,eAEpB2B,GACC,kBAACD,EAAD,CAAa7B,YAAauF,KAAKvF,YAAa8B,WAAYA,KATzC,8C,GAnNN6D,IAAMC,WCkBVC,E,4MAtBbxD,MAAQ,G,qSAYN,OAEI,yBAAKvB,UAAU,kBAEb,kBAAC,EAAD,W,GAnBQ6E,IAAMC,WCMJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzH,QAAQyH,MAAMA,EAAMC,a","file":"static/js/main.708b433e.chunk.js","sourcesContent":["const BASE_URL = \"/api/test\";\r\nconst axios = require(\"axios\");\r\n/*PROD*/\r\nconst domain = \"https://test102-monday-pipl.herokuapp.com\";\r\n\r\n/*DEV*/\r\n// const domain = \"http://localhost:3030\";\r\n\r\n// saveToStorage(PREFIX_KEY, {})\r\n// function creatPrefixMap() {\r\n//     var prefixMap\r\n\r\n// }\r\n\r\nasync function query(prefix, targetCol) {\r\n  // try {\r\n  //     axios.post('', ())\r\n  // }\r\n\r\n  let res = await fetch(domain + \"/api/monday/test\", {\r\n    method: \"post\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      colData: { prefix, targetCol },\r\n    }),\r\n  });\r\n  res = await res.json();\r\n\r\n  return res.data;\r\n}\r\n\r\nasync function addColumnBack(query) {\r\n  let res = await fetch(domain + \"/api/monday/addColumn\", {\r\n    method: \"post\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      query: query,\r\n    }),\r\n  });\r\n  console.log(\"res: \", res);\r\n\r\n  res = await res.json();\r\n\r\n  return res;\r\n}\r\nasync function authMonday() {\r\n  let res = await fetch(domain + \"/api/monday/auth\", {\r\n    method: \"post\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  console.log(\"res: \", res);\r\n\r\n  res = await res.json();\r\n\r\n  return res;\r\n}\r\n\r\nasync function getPrefixMapByBoardId(boardId) {\r\n  // try {\r\n  //     axios.post('http://localhost:8302', ())\r\n  // }\r\n\r\n  // let res = await fetch(domain+'/api/monday/getPrefixMap/'+boardId, {\r\n  console.log(\"domain: \", domain);\r\n\r\n  let res = await fetch(domain + \"/api/monday/getPrefixMap\", {\r\n    method: \"post\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      boardId: boardId,\r\n    }),\r\n  });\r\n  res = await res.json();\r\n\r\n  return res;\r\n}\r\n\r\nasync function getPrefixMapAll(boardId) {\r\n  // try {\r\n  //     axios.post('http://localhost:8302', ())\r\n  // }\r\n\r\n  // let res = await fetch(domain+'/api/monday/getPrefixMap/'+boardId, {\r\n  console.log(\"domain: \", domain);\r\n\r\n  let res = await fetch(domain + \"/api/monday/getPrefixMapAll\", {\r\n    method: \"post\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      boardId: boardId,\r\n    }),\r\n  });\r\n  res = await res.json();\r\n\r\n  return res;\r\n}\r\n\r\nasync function updatePrefixMap(prefixMap) {\r\n  // try {\r\n  //     axios.post('http://localhost:8302', ())\r\n  // }\r\n\r\n  let res = await fetch(domain + \"/api/monday/updatePrefixMap\", {\r\n    method: \"post\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      prefixMap: prefixMap,\r\n    }),\r\n  });\r\n  res = await res.json();\r\n\r\n  return res;\r\n}\r\nasync function updatePrefixMapAll(prefixMapAll) {\r\n  // try {\r\n  //     axios.post('http://localhost:8302', ())\r\n  // }\r\n\r\n  let res = await fetch(domain + \"/api/monday/updatePrefixMapAll\", {\r\n    method: \"post\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      prefixMapAll: prefixMapAll,\r\n    }),\r\n  });\r\n  res = await res.json();\r\n\r\n  return res;\r\n}\r\n\r\nasync function resetPrefix(prefix) {\r\n  console.log(\"prefix: \", prefix);\r\n\r\n  //     axios.post('http://localhost:8302', ())\r\n  // }\r\n  try {\r\n    let res = await fetch(domain + \"/api/monday/resetPrefix\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        prefix: prefix,\r\n      }),\r\n    });\r\n    res = await res.json();\r\n\r\n    return res;\r\n  } catch (err) {}\r\n}\r\n\r\nexport default {\r\n  query,\r\n  // getPrefixMap,\r\n  updatePrefixMap,\r\n  updatePrefixMapAll,\r\n  getPrefixMapByBoardId,\r\n  addColumnBack,\r\n  authMonday,\r\n  getPrefixMapAll,\r\n  resetPrefix,\r\n};\r\n","import React, { useState } from 'react'\r\nimport Select from 'react-select';\r\nimport Button from \"monday-ui-react-core/dist/Button.js\"\r\n\r\n// import { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\r\n\r\nfunction AddColumn({columns, createColumn }) {\r\n    const [preFix, setPreFix] = useState('')\r\n    const [selectedOption, setSelectedOption] = useState(null)\r\n\r\n    const handleInput = ({ target: { value } }) => {\r\n        if (!value) return\r\n        setPreFix(value)\r\n    }\r\n\r\n    const handleSelect = (selectedOption) => {\r\n        setSelectedOption(selectedOption)\r\n        // setSelectedColumn(selectedOption)\r\n    }\r\n\r\n    const onCreateColumn = (ev) => {\r\n        ev.preventDefault()\r\n        if (!selectedOption?.value) return\r\n        createColumn(selectedOption.value)\r\n    }\r\n\r\n    const options = columns.map(column => { return { value: column.id, label: column.title } })\r\n    return (\r\n        \r\n        <form className=\"add-column\">\r\n            <Select\r\n                placeholder=\"Choose a Status column as an ID prefix\"\r\n                value={selectedOption}\r\n                options={options}\r\n                onChange={handleSelect}\r\n                className='check'\r\n            />\r\n\r\n            {/* <input placeholder=\"Choose target column prefix\" onInput={handleInput} name=\"prefix\" value={preFix} /> */}\r\n            {/* <button onClick={onCreateColumn}>Add Column</button> */}\r\n            <Button  kind={Button.kinds.PRIMARY} onClick={onCreateColumn} style={{ width: '150px'}} size={Button.sizes.MEDIUM}>Add Column</Button>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddColumn\r\n","import React, { useState } from 'react'\r\nimport Select from 'react-select';\r\nimport Button from \"monday-ui-react-core/dist/Button.js\"\r\n\r\nexport default function ResetPrefix({ prefixKeys, resetPrefix }) {\r\n\r\n  const [selectedOption, setSelectedOption] = useState(null)\r\n\r\n\r\n\r\n  const handleSelect = (selectedOption) => {\r\n    console.log('handleSelect -> selectedOption', selectedOption)\r\n    setSelectedOption(selectedOption)\r\n  }\r\n\r\n  const onResetPrefix = () => {\r\n    if (!selectedOption.value) return\r\n    resetPrefix(selectedOption.value)\r\n\r\n  }\r\n\r\n  return (\r\n    <form className=\"reset-prefix\">\r\n      <Select\r\n        placeholder=\"Choose prefix to reset\"\r\n        value={selectedOption}\r\n        options={prefixKeys}\r\n        onChange={handleSelect}\r\n      className='check'\r\n      />\r\n      <Button onClick={onResetPrefix} color={Button.colors.NEGATIVE} kind={Button.kinds.PRIMARY} style={{ width: '150px' }} size={Button.sizes.MEDIUM}>Reset Prefix</Button>\r\n\r\n    </form>\r\n\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport \"monday-ui-react-core/dist/main.css\";\r\n//Explore more Monday React Components here: https://style.monday.com/\r\nimport AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\";\r\nimport mondayService from \"../services/mondayService\";\r\nimport AddColumn from \"../cmps/AddColumn\";\r\nimport ResetPrefix from \"../cmps/ResetPrefix\";\r\nconst monday = mondaySdk();\r\nconst KEY = \"BOARD_KEY\";\r\nclass Home extends React.Component {\r\n  // Default state\r\n  state = {\r\n    settings: {\r\n      background: \"#e2445c\",\r\n      attentionBoxTitle: \"Hey\",\r\n      attentionBoxType: \"danger\",\r\n    },\r\n    name: \"\",\r\n    nextNum: null,\r\n    columns: null,\r\n    selectedColumn: null,\r\n    prefixMap: null,\r\n    isFirst: true,\r\n    prefixKeys: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // mondayService.authorization()\r\n    var query;\r\n    this.setPrefixKeys();\r\n    await monday.listen(\"context\", async (res) => {\r\n      const boardId = res.data.boardIds[0];\r\n      // let prefixMap = await mondayService.getPrefixMapByBoardId(boardId)\r\n      // const isFirst = !!prefixMap\r\n\r\n      // const { id: boardId } = res.data.boards[0]\r\n      this.setState({ ...this.state, boardId });\r\n\r\n      query = `query {boards (ids:${this.state.boardId}){\r\n        columns {\r\n          id\r\n          title\r\n          type\r\n        }\r\n      }}`;\r\n      res = await monday.api(query);\r\n      let { columns } = res.data.boards[0];\r\n      columns = columns.filter(\r\n        (col) => col.type === \"color\" || col.type === \"text\"\r\n      );\r\n      // columns = columns.filter(col => col.type === 'text') // new prod - yuval\r\n      this.setState({ columns });\r\n    });\r\n  }\r\n\r\n  getItemsIds = async (boardId) => {\r\n    const query = `\r\n    query \r\n      { boards (ids:${boardId}) \r\n        { items {\r\n           id\r\n      \r\n          }\r\n        }\r\n      }`;\r\n    const { data } = await monday.api(query);\r\n    const { items } = data.boards[0];\r\n    return items.map((item) => item.id);\r\n  };\r\n\r\n  createColumn = async (srcColId) => {\r\n    try {\r\n      Swal.showLoading();\r\n\r\n      const { boardId } = this.state;\r\n      let prefixMap = await mondayService.getPrefixMapByBoardId(boardId);\r\n      let prefixMapAll = await mondayService.getPrefixMapAll(boardId);\r\n      /* reconstract prefixmap to match what we did before */\r\n      prefixMapAll = { map: prefixMapAll[0] };\r\n      if (prefixMap) {\r\n        const { isConfirmed } = await Swal.fire({\r\n          title: \"You Already have an ID Column\",\r\n          text: \"Are you sure you want to create another one?\",\r\n          icon: \"warning\",\r\n          confirmButtonText: \"yes\",\r\n          showDenyButton: \"true\",\r\n          denyButtonText: \"no\",\r\n        });\r\n        if (!isConfirmed) return;\r\n      }\r\n\r\n      var query = `mutation {\r\n        create_column(board_id: ${boardId}, title: \"PERSISTENT ID\", column_type: text) {\r\n          id\r\n        }\r\n      }`;\r\n      let res = await monday.api(query);\r\n      // let res = await mondayService.addColumnBack(query)\r\n\r\n      const {\r\n        create_column: { id: targetColId },\r\n      } = res.data;\r\n      const colPrefixs = await this.getColPrefixs(srcColId, boardId);\r\n      const itemsIds = await this.getItemsIds(boardId);\r\n\r\n      prefixMap = prefixMap || { map: {}, boardId };\r\n      itemsIds.forEach(async (itemId, idx) => {\r\n        const currPrefix = colPrefixs[idx];\r\n        let text = \"\";\r\n        if (currPrefix) {\r\n          const count = await this.getPrefixCount(currPrefix, prefixMapAll);\r\n          text = currPrefix + \"-\" + count;\r\n        }\r\n        text = JSON.stringify(text);\r\n        query = ` mutation {\r\n          change_simple_column_value (board_id: ${boardId}, item_id: ${itemId}, column_id: \"${targetColId}\", value: ${text}) {\r\n            id\r\n          }\r\n        }`;\r\n        await monday.api(query);\r\n      });\r\n\r\n      await this.savePrefixMap(prefixMap, prefixMapAll, srcColId, targetColId);\r\n      Swal.close();\r\n\r\n      Swal.fire({\r\n        icon: \"success\",\r\n        title: \"Column Added Successfully\",\r\n        text: \"Please refresh to continue\",\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error: \", error);\r\n    } finally {\r\n    }\r\n    // window.parent.location.reload();\r\n  };\r\n\r\n  getColPrefixs = async (srcColId, boardId) => {\r\n    const query = `query\r\n                     {  boards (ids:${boardId}) \r\n                         { items {\r\n                           column_values {\r\n                             id\r\n                             text\r\n                            }\r\n                         }\r\n                       }\r\n                     }`;\r\n\r\n    let res = await monday.api(query);\r\n    const {\r\n      data: { boards },\r\n    } = res;\r\n    const { items } = boards[0];\r\n    return items.map((itemColVals) => {\r\n      const { column_values: colVals } = itemColVals;\r\n      const srcColVal = colVals.find((col) => col.id === srcColId);\r\n      return srcColVal.text;\r\n    });\r\n  };\r\n\r\n  getPrefixCount = async (prefix, prefixMap) => {\r\n    if (prefix === \"null\") return \"\";\r\n    prefixMap.map[prefix] = prefixMap.map[prefix]\r\n      ? prefixMap.map[prefix] + 1\r\n      : 1;\r\n    return prefixMap.map[prefix];\r\n  };\r\n\r\n  savePrefixMap = async (prefixMap, prefixMapAll, srcColId, targetColId) => {\r\n    prefixMap.targetColId = targetColId;\r\n    prefixMap.srcColId = srcColId;\r\n    const newPrefixMap = await mondayService.updatePrefixMap(prefixMap);\r\n    await mondayService.updatePrefixMapAll(prefixMapAll);\r\n  };\r\n\r\n  // apiCallTest = () => {\r\n  //   const query = ``\r\n  // }\r\n\r\n  setSelectedColumn = (selectedColumn) => {\r\n    this.setState({ selectedColumn });\r\n  };\r\n\r\n  authMonday = () => {\r\n    mondayService.authMonday();\r\n  };\r\n\r\n  setPrefixKeys = async () => {\r\n    const prefixeMapArr = await mondayService.getPrefixMapAll();\r\n    let prefixKeys = Object.keys(prefixeMapArr[0])\r\n      .filter((key) => key !== \"_id\")\r\n      .map((key) => ({ value: key, label: key }));\r\n    this.setState({ prefixKeys });\r\n    console.log(\"setPrefixKeys= -> prefixKeys\", prefixKeys);\r\n  };\r\n\r\n  resetPrefix = async (prefix) => {\r\n    const { isConfirmed } = await Swal.fire({\r\n      title: \"\",\r\n      text: `Are you sure you want to reset \"${prefix}\"?`,\r\n      icon: \"warning\",\r\n      confirmButtonText: \"yes\",\r\n      showDenyButton: \"true\",\r\n      denyButtonText: \"no\",\r\n    });\r\n    if (!isConfirmed) return;\r\n\r\n    try {\r\n      await mondayService.resetPrefix(prefix);\r\n      Swal.fire({\r\n        icon: \"success\",\r\n        title: `The prefix \"${prefix}\" is now reset`,\r\n        // text: 'Please refresh to continue',\r\n      });\r\n    } catch (err) {}\r\n  };\r\n\r\n  render() {\r\n    const { columns, prefixKeys } = this.state;\r\n    if (!columns) return <div>Loading..</div>;\r\n    return (\r\n      <div className=\"container\">\r\n        <AddColumn\r\n          setSelectedColumn={this.setSelectedColumn}\r\n          columns={columns}\r\n          createColumn={this.createColumn}\r\n        />\r\n        {prefixKeys && (\r\n          <ResetPrefix resetPrefix={this.resetPrefix} prefixKeys={prefixKeys} />\r\n        )}\r\n        {/* <button onClick={this.authMonday}></button> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport \"monday-ui-react-core/dist/main.css\"\r\nimport Home from \"./Home\";\r\n//Explore more Monday React Components here: https://style.monday.com/\r\n\r\nclass App extends React.Component {\r\n\r\n  // Default state\r\n  state = {\r\n\r\n  };\r\n\r\n\r\n  async componentDidMount() {\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n        <div className=\"main-container\">\r\n          {/* <header className=\"main-header\">Hello!</header> */}\r\n          <Home/>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./pages/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}